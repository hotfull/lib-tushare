{"version":3,"file":"tushare.js","sources":["src/tushare.js"],"sourcesContent":["/* eslint-disable camelcase */\nconst axios = require(\"axios\");\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst FlowControl = require(\"@wt/lib-flowcontrol\");\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-yy-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\n// const token = \"\"\nconst tushareUrl = \"http://api.tushare.pro\";\n// 增加一个 fieldNames用来给出每个字段（包括输入/输出的说明）\nconst fieldNames = {\n    is_hs: \"是否沪深港通标的，N否 H沪股通 S深股通\",\n    list_status: \"上市状态： L上市 D退市 P暂停上市\",\n    exchange: \"交易所代码 SSE上交所 SZSE深交所 HKEX港交所(未上线)\",\n    ts_code: \"TS代码\",\n    symbol: \"股票代码\",\n    name: \"股票名称\",\n    area: \"所在地域\",\n    industry: \"所属行业\",\n    fullname: \"股票全称\",\n    enname: \"英文全称\",\n    market: \"市场类型 （主板/中小板/创业板/科创板）\",\n    curr_type: \"交易货币\",\n    list_date: \"上市日期\",\n    delist_date: \"退市日期\",\n    start_date: \"开始日期\",\n    end_date: \"结束日期\",\n    is_open: \"是否交易 0 休市 1交易\",\n    ann_date: \"公告日期（YYYYMMDD格式）\",\n    change_reason: \"变更原因\",\n\n    chairman: \"法人代表\",\n    manager: \"总经理\",\n    secretary: \"董秘\",\n    reg_capital: \"注册资本\",\n    setup_date: \"注册日期\",\n    province: \"所在省份\",\n    city: \"所在城市\",\n    introduction: \"公司介绍\",\n    website: \"公司主页\",\n    email: \"电子邮件\",\n    office: \"办公室\",\n    employees: \"员工人数\",\n    main_business: \"主要业务及产品\",\n    business_scope: \"经营范围\",\n    gender: \"性别\",\n    lev: \"岗位类别\",\n    title: \"岗位\",\n    edu: \"学历\",\n    national: \"国籍\",\n    birthday: \"出生年月\",\n    begin_date: \"上任日期\",\n    // end_date: '离任日期',\n    resume: \"个人简历\",\n    trade_date: \"交易日期\",\n    open: \"开盘价\",\n    high: \"最高价\",\n    low: \"最低价\",\n    close: \"收盘价\",\n    pre_close: \"昨收价\",\n    change: \"涨跌额\",\n    pct_chg: \"涨跌幅 （未复权）\",\n    vol: \"成交量 （手）\",\n    amount: \"成交额 （千元）\",\n    adj_factor: \"复权因子\",\n    suspend_type: \"停复牌类型：S-停牌,R-复牌\",\n    suspend_timing: \"日内停牌时间段\",\n    turnover_rate: \"换手率（%）\",\n    turnover_rate_f: \"换手率（自由流通股）\",\n    volume_ratio: \"量比\",\n    pe: \"市盈率（总市值/净利润， 亏损的PE为空）\",\n    pe_ttm: \"市盈率（TTM，亏损的PE为空）\",\n    pb: \"市净率（总市值/净资产）\",\n    ps: \"市销率\",\n    ps_ttm: \"市销率（TTM）\",\n    dv_ratio: \"股息率 （%）\",\n    dv_ttm: \"股息率（TTM）（%）\",\n    total_share: \"总股本 （万股）\",\n    float_share: \"流通股本 （万股）\",\n    free_share: \"自由流通股本 （万）\",\n    total_mv: \"总市值 （万元）\",\n    circ_mv: \"流通市值（万元）\",\n};\nconst globalIndexList = [\n    { code: \"XIN9\", name: \"富时中国A50指数 (富时A50)\" },\n    { code: \"HSI\", name: \"恒生指数\" },\n    { code: \"DJI\", name: \"道琼斯工业指数\" },\n    { code: \"SPX\", name: \"标普500指数\" },\n    { code: \"IXIC\", name: \"纳斯达克指数\" },\n    { code: \"FTSE\", name: \"富时100指数\" },\n    { code: \"FCHI\", name: \"法国CAC40指数\" },\n    { code: \"GDAXI\", name: \"德国DAX指数\" },\n    { code: \"N225\", name: \"日经225指数\" },\n    { code: \"KS11\", name: \"韩国综合指数\" },\n    { code: \"AS51\", name: \"澳大利亚标普200指数\" },\n    { code: \"SENSEX\", name: \"印度孟买SENSEX指数\" },\n    { code: \"IBOVESPA\", name: \"巴西IBOVESPA指数\" },\n    { code: \"RTS\", name: \"俄罗斯RTS指数\" },\n    { code: \"TWII\", name: \"台湾加权指数\" },\n    { code: \"SPTSX\", name: \"加拿大S&P/TSX指数\" },\n];\nconst indexMarketList = [\n    // {code: \"MSCI\", name: \"MSCI指数\"},\n    { code: \"CSI\", name: \"中证指数\" },\n    { code: \"SSE\", name: \"上交所指数\" },\n    { code: \"SZSE\", name: \"深交所指数\" },\n    // {code: \"CICC\", name: \"中金指数\"},\n    // {code: \"SW\", name: \"申万指数\"},\n    // {code: \"OTH\", name: \"其他指数\"},\n];\n\nconst apiNames = {\n    stockBasic: \"stock_basic\",\n    stockCompany: \"stock_company\",\n    stockManagers: \"stk_managers\",\n    stockRewards: \"stk_rewards\",\n    newShare: \"new_share\",\n    // 接口：daily，日线行情\n    // 数据说明：交易日每天15点～16点之间。本接口是未复权行情，停牌期间不提供数据。\n    // 描述：获取股票行情数据，或通过通用行情接口获取数据，包含了前后复权数据。\n    daily: \"daily\",\n    // 接口：adj_factor\n    // 更新时间：早上9点30分\n    // 描述：获取股票复权因子，可提取单只股票全部历史复权因子，也可以提取单日全部股票的复权因子。\n    adjustFactor: \"adj_factor\",\n    // 接口：suspend_d\n    // 更新时间：不定期\n    // 描述：按日期方式获取股票每日停复牌信息\n    suspendInfo: \"suspend_d\",\n    // 接口：daily_basic\n    // 更新时间：交易日每日15点～17点之间\n    // 描述：获取全部股票每日重要的基本面指标，可用于选股分析、报表展示等。\n    dailyBasic: \"daily_basic\",\n    // 接口：moneyflow\n    // 描述：获取沪深A股票资金流向数据，分析大单小单成交情况，用于判别资金动向\n    moneyFlow: \"moneyflow\",\n    // 接口：limit_list\n    // 描述：获取每日涨跌停股票统计，包括封闭时间和打开次数等数据，帮助用户快速定位近期强（弱）势股，以及研究超短线策略。\n    limitList: \"limit_list\",\n    // 接口：moneyflow_hsgt\n    // 描述：获取沪股通、深股通、港股通每日资金流向数据，每次最多返回300条记录，总量不限制。\n    moneyFlowHSGT: \"moneyflow_hsgt\",\n    // 接口：hsgt_top10\n    // 描述：获取沪股通、深股通每日前十大成交详细数据\n    hsgtTop10: \"hsgt_top10\",\n    // 接口：hk_hold\n    // 描述：获取沪深港股通持股明细，数据来源港交所。\n    hkHold: \"hk_hold\",\n    // 接口：ggt_daily\n    // 描述：获取港股通每日成交信息，数据从2014年开始\n    ggtDaily: \"ggt_daily\",\n    // 接口：ggt_monthly\n    // 描述：港股通每月成交信息，数据从2014年开始\n    ggtMonthly: \"ggt_monthly\",\n    // 接口：index_global\n    // 描述：获取国际主要指数日线行情\n    indexGlobal: \"index_global\",\n    // 接口：income\n    // 描述：获取上市公司财务利润表数据\n    income: \"income\",\n    // 接口：index_basic\n    // 描述：获取指数基础信息。\n    indexBasic: \"index_basic\",\n    // 接口：index_daily\n    // 描述：获取指数每日行情\n    indexDaily: \"index_daily\",\n    // 接口：index_weight\n    // 描述：获取各类指数成分和权重，月度数据\n    indexWeight: \"index_weight\",\n    // 接口：index_dailybasic\n    // 描述：目前只提供上证综指，深证成指，上证50，中证500，中小板指，创业板指的每日指标数据\n    indexDailyBasic: \"index_dailybasic\",\n    // 接口：index_classify\n    // 描述：获取申万行业分类，包括申万28个一级分类，104个二级分类，227个三级分类的列表信息\n    indexClassify: \"index_classify\",\n    // 接口：index_member\n    // 描述：申万行业成分\n    indexMember: \"index_member\",\n    // 接口：daily_info\n    // 描述：获取交易所股票交易统计，包括各板块明细\n    dailyInfo: \"daily_info\",\n};\n\nconst apiFields = {\n    stockBasic:\n        \"ts_code,symbol,name,area,industry,fullname,enname,market,exchange,curr_type,list_status,list_date,delist_date,is_hs\",\n    stockCompany:\n        \"ts_code,exchange,chairman,manager,secretary,reg_capital,setup_date,province,city,introduction,website,email,office,employees,main_business,business_scope\",\n    stockManagers:\n        \"ts_code,ann_date,name,gender,lev,title,edu,national,birthday,begin_date,end_date,resume\",\n    stockRewards: \"ts_code,ann_date,end_date,name,title,reward,hold_vol\",\n    newShare:\n        \"ts_code,sub_code,name,ipo_date,issue_date,amount,market_amount,price,pe,limit_amount,funds,ballot\",\n    daily:\n        \"ts_code,trade_date,open,high,low,close,pre_close,change,pct_chg,vol,amount\",\n    adjustFactor: \"ts_code,trade_date,adj_factor\",\n    suspendInfo: \"ts_code,trade_date,suspend_timing,suspend_type\",\n    dailyBasic:\n        \"ts_code,trade_date,close,turnover_rate,turnover_rate_f,volume_ratio,pe,pe_ttm,pb,ps,ps_ttm,dv_ratio,dv_ttm,total_share,float_share,free_share,total_mv,circ_mv\",\n    moneyFlow:\n        \"ts_code,trade_date,buy_sm_vol,buy_sm_amount,sell_sm_vol,sell_sm_amount,buy_md_vol,buy_md_amount,sell_md_vol,sell_md_amount,buy_lg_vol,buy_lg_amount,sell_lg_vol,sell_lg_amount,buy_elg_vol,buy_elg_amount,sell_elg_vol,sell_elg_amount,net_mf_vol,net_mf_amount\",\n    limitList:\n        \"ts_code,trade_date,name,close,pct_chg,amp,fc_ratio,fl_ratio,fd_amount,first_time,last_time,open_times,strth,limit\",\n    moneyFlowHSGT: \"trade_date,ggt_ss,ggt_sz,hgt,sgt,north_money,south_money\",\n    hsgtTop10:\n        \"ts_code,trade_date,name,close,change,rank,market_type,amount,net_amount,buy,sell\",\n    hkHold: \"code,trade_date,ts_code,name,vol,ratio,exchange\",\n    ggtDaily: \"trade_date,buy_amount,buy_volume,sell_amount,sell_volume\",\n    ggtMonthly:\n        \"month,day_buy_amt,day_buy_vol,day_sell_amt,day_sell_vol,total_buy_amt,total_buy_vol,total_sell_amt,total_sell_vol\",\n    indexGlobal:\n        \"ts_code,trade_date,open,close,high,low,pre_close,change,pct_chg,vol,amount\",\n    income:\n        \"ts_code,ann_date,f_ann_date,end_date,report_type,comp_type,basic_eps,total_revenue,revenue,int_income,prem_earned,comm_income,n_commis_income,n_oth_income,n_oth_b_income,out_prem,une_prem_reser,reins_income,n_sec_tb_income,n_sec_uw_income,n_asset_mg_income,oth_b_income,fv_value_chg_gain,invest_income,ass_invest_income,forex_gain,total_cogs,oper_cost,int_exp,comm_exp,biz_tax_surchg,sell_exg,admin_exp,fin_exp,assets_impair_loss,prem_refund,compens_payout,reser_insur_liab,div_payt,reins_exp,oper_exp,compens_payout_refu,insur_reser_refu,reins_cost_refund,other_bus_cost,operate_profit,non_oper_income,non_oper_exp,nca_disploss,total_profit_income_tax,n_income,n_income_attr_p,minority_gain,oth_compr_income,t_compr_income,compr_inc_attr_p,compr_inc_attr_m_s,ebit,ebitda,insurance_exp,undist_profit,distable_profit,update_flag\",\n    indexBasic:\n        \"ts_code,name,fullname,market,publisher,index_type,category,base_date,base_point,list_date,weight_rule,desc,exp_date\",\n    indexDaily:\n        \"ts_code,trade_date,close,open,high,low,pre_close,change,pct_chg,vol,amount\",\n    indexWeight: \"index_code,con_code,trade_date,weight\",\n    indexDailyBasic:\n        \"ts_code,trade_date,total_mv,float_mv,total_share,float_share,free_share,turnover_rate,turnover_rate_f,pe,pe_ttm,pb\",\n    indexClassify: \"index_code,industry_name,level,industry_code\",\n    indexMember:\n        \"index_code,index_name,con_code,con_name,in_date,out_date,is_new\",\n    dailyInfo:\n        \"trade_date,ts_code,ts_name,com_count,total_share,float_share,total_mv,float_mv,amount,vol,trans_count,pe,tr,exchange\",\n};\n\n// 每个api_name对应一组流控参数，如果没有配置，则认为不需要流控，\n// 或者统一放在一个默认流控池中控制\nconst DEFAULT_FLOWCONTROL_NAME = \"默认\";\nconst FLOW_CONFIG = {\n    [apiNames.daily]: { maxFlow: 800 },\n    [apiNames.indexDaily]: { maxFlow: 300 },\n    [apiNames.adjustFactor]: { maxFlow: 800 },\n    [apiNames.dailyBasic]: { maxFlow: 400 },\n    [DEFAULT_FLOWCONTROL_NAME]: { maxFlow: 800 },\n};\n\n// const MAX_WORKER = 20\n// const MAX_FLOW = 300\n// 流控池，每个协议定义自己的流控\n// const flowControl = {\n//     daily: new FlowControl(MAX_WORKER, MAX_FLOW, \"tushare流控\"),\n// }\n\nfunction initFlowControl() {\n    let tmp = {};\n    for (let api in FLOW_CONFIG) {\n        if (Object.prototype.hasOwnProperty.call(FLOW_CONFIG, api)) {\n            tmp[api] = new FlowControl(\n                FLOW_CONFIG[api].maxFlow,\n                `接口${api}流控`\n            );\n            logger.debug(`创建流控 接口${api}, %o`, tmp[api]);\n        }\n    }\n    return tmp;\n}\nconst flowControls = initFlowControl();\n\n// 请求计数\nlet requestCount = 0;\nlet responseCount = 0;\nlet errorCount = 0;\n\n/**\n *\n * @param {string} api 发起请求的接口名称\n * @param {object} params 接口参数\n * @param {string} fields 返回字段列表，逗号分割字符串\n * @param {Function} hasMoreParams 如果接口返回hasMore，使用该方法计算获取下一次数据的参数，方法传入上一次参数和本次返回数据，不设置则不支持hasMore\n * @param {Function} moreDatas 在支持hasMore后，返回数据和之前数据的合并处理方法，传入之前的数据和这一次返回数据，返回合并结果，不设置则按照数组自动添加在后面\n */\n// eslint-disable-next-line max-params\nasync function queryData(\n    api = \"\",\n    params = {},\n    fields = \"\",\n    hasMoreParams = null,\n    moreDatas = null\n) {\n    if (!api && api === \"\") {\n        throw new Error(\"未指定接口api名称！\");\n    }\n    // logger.log(\"tushare query data:\", api, params)\n    // logger.log(\"env: \", process.env)\n\n    // await sleep(1000 / 800)\n    // console.count(\"queryData\");\n    logger.debug(\n        \"%s 发送请求，%s, %o\",\n        moment().format(\"h:mm:ss\"),\n        api,\n        params\n    );\n    requestCount++;\n\n    // 流控添加到axios发起时触发，流控池由api_name进行分组\n    let fc = flowControls[api];\n    if (!fc) {\n        fc = flowControls[DEFAULT_FLOWCONTROL_NAME];\n    }\n    // logger.debug(\"use flow control: \", api, fc, typeof fc)\n    const response = await fc.call(axios.post, tushareUrl, {\n        api_name: api,\n        token: process.env.TUSHARE_TOKEN,\n        params,\n        fields: fields,\n    });\n\n    // const response = await axios.post(tushareUrl, {\n    //     api_name: api,\n    //     token: process.env.TUSHARE_TOKEN,\n    //     params,\n    //     fields: fields,\n    // })\n\n    // .then(function (response) {\n    // logger.log(response)\n    responseCount++;\n    if (response && response.data && response.data.code === 0) {\n        let fields = response.data.data.fields;\n        let items = response.data.data.items;\n        let hasMore = response.data.data.has_more;\n\n        logger.debug(\n            \"收到服务器响应：字段数量=%d, 数据长度=%d，是否还有更多数据：%s；请求信息 %s，%o\",\n            fields.length,\n            items.length,\n            hasMore,\n            api,\n            params\n        );\n        let data = await constructData({ fields, items });\n        // logger.log(\"constructed data:\", data.length)\n\n        // 这里考虑在hasMore为true，并且传入了hasMoreParams方法的情况下执行更多数据获取的逻辑\n        if (hasMore && hasMoreParams && _.isFunction(hasMoreParams)) {\n            let nextParams = await hasMoreParams(params, data);\n            logger.debug(\n                \"有更多数据需要获取：%o, %o, %d\",\n                params,\n                nextParams,\n                data && data.length\n            );\n            // 如果无法设置参数，会返回空，这里就不再继续获取\n            if (nextParams) {\n                let moreRetData = await queryData(\n                    api,\n                    nextParams,\n                    fields,\n                    hasMoreParams,\n                    moreDatas\n                );\n                hasMore = moreRetData && moreRetData.hasMore;\n                let moreData = moreRetData && moreRetData.data;\n\n                if (moreDatas && _.isFunction(moreDatas)) {\n                    logger.debug(\n                        \"更多数据调用合并: %d && %d\",\n                        data.length,\n                        moreData.length\n                    );\n                    data = await moreDatas(data, moreData && moreData.data);\n                } else {\n                    logger.debug(\n                        \"更多数据自动合并: %d && %d\",\n                        data.length,\n                        moreData.length\n                    );\n                    data.push(...moreData);\n                }\n            } else {\n                hasMore = false;\n            }\n        }\n\n        return {\n            data,\n            hasMore,\n        };\n    }\n    errorCount++;\n    logger.error(\n        \"发现错误(请求信息 %s, %o)：%s, %s\",\n        api,\n        params,\n        response.data.code,\n        response.data.msg\n    );\n    throw new Error(\n        \"接口返回错误[\" + response.data.code + \"]:\" + response.data.msg\n    );\n}\n\n// async function queryDataLimit(api, params, fields) {\n//     return flowControl.call(queryData, api, params, fields)\n// }\n\n/**\n * 重构接口返回数据\n * @param {Array} data http接口返回数据\n */\nasync function constructData(data) {\n    if (!data) return data;\n    let fields = data.fields;\n    let items = data.items;\n    let tmp = [];\n    if (!fields || fields.length === 0 || !items || items.length === 0) {\n        return tmp;\n    }\n\n    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n        let tmpItem = {};\n        for (let fieldIndex = 0; fieldIndex < fields.length; fieldIndex++) {\n            tmpItem[fields[fieldIndex]] = items[itemIndex][fieldIndex];\n        }\n        tmp.push(tmpItem);\n    }\n    return tmp;\n}\n\nasync function stockBasic(exchange = \"\", listStatus = \"L\") {\n    let data = await queryData(\n        apiNames.stockBasic,\n        {\n            exchange,\n            list_status: listStatus,\n        },\n        apiFields.stockBasic\n    );\n    return data && data.data;\n}\n\nasync function stockCompany(tsCode, exchange) {\n    if (_.isEmpty(tsCode)) return new Error(\"公司基本信息未指定代码\");\n    if (_.isEmpty(exchange)) return new Error(\"公司基本信息未指定交易所\");\n\n    let data = await queryData(\n        apiNames.stockCompany,\n        {\n            ts_code: tsCode,\n            exchange,\n        },\n        apiFields.stockCompany\n    );\n    return data && data.data;\n}\n\nasync function stockManagers(tsCode = \"\", annDate = \"\", startDate, endDate) {\n    if (\n        _.isEmpty(tsCode) &&\n        _.isEmpty(annDate) &&\n        _.isEmpty(startDate) &&\n        _.isEmpty(endDate)\n    ) {\n        return new Error(\"上市公司管理层参数设置错误！\");\n    }\n\n    let data = await queryData(\n        apiNames.stockManagers,\n        {\n            ts_code: tsCode,\n            ann_date: annDate,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.stockManagers\n    );\n    return data && data.data;\n}\n\n/**\n * 这个方法用来读取指定股票代码的历史数据，如果startDate未设置，则需要获取全部\n * 如果startDate未设置，需要读取最新\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期\n * @param {string} endDate 结束日期\n */\nasync function stockDaily(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"日线行情数据代码设置错误！\");\n    }\n\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.daily,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.daily,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    logger.debug(\n        `获得日线数据 ${tsCode}, 条数=${data && data.data && data.data.length}`\n    );\n    return data && data.data;\n    // let hasMore = true\n    // let retData = []\n    // while (hasMore) {\n    //     let data = null\n    //     // 计算下一个日期范围\n    //     if (retData.length > 0) {\n    //         let lastDate = moment(retData[retData.length - 1].trade_date, \"YYYYMMDD\")\n    //         endDate = lastDate.subtract(1, \"days\").format(\"YYYYMMDD\")\n    //     }\n\n    //     logger.debug(\"stock daily query: \", tsCode, startDate, endDate)\n\n    //     // eslint-disable-next-line no-await-in-loop\n    //     let tmp = await queryData(\n    //         apiNames.daily,\n    //         {\n    //             ts_code: tsCode,\n    //             start_date: startDate,\n    //             end_date: endDate,\n    //         },\n    //         apiFields.daily\n    //     )\n    //     hasMore = tmp && tmp.hasMore\n    //     data = tmp && tmp.data\n\n    //     if (data && data.length > 0) {\n    //         retData.push(...data)\n    //     }\n    //     logger.debug(\"stock daily read: \", tsCode, data && data.length, hasMore, retData && retData.length)\n    // }\n    // return retData\n}\n\n/**\n * 这个方法用来读取指定指数代码的历史数据，如果startDate未设置，则需要获取全部\n * 如果startDate未设置，需要读取最新\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期\n * @param {string} endDate 结束日期\n */\nasync function indexDaily(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"指数日线数据代码设置错误！\");\n    }\n\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.indexDaily,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.indexDaily,\n        async (params, retData) => {\n            let endDate = \"\";\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                endDate = lastDate.subtract(1, \"days\").format(\"YYYYMMDD\");\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: endDate,\n                };\n            }\n            return null;\n        }\n    );\n    logger.debug(\n        `获得指数日线数据 ${tsCode}, 条数=${\n            data && data.data && data.data.length\n        }`\n    );\n    return data && data.data;\n}\n\n/**\n * 提供一只股票指定时间范围的全部复权因子数据，这个数据可以在日线历史数据中配合使用\n * @param {string} tsCode 股票代码\n * @param {string} startDate 读取复权因子的开始日期 YYYYMMDD\n * @param {string} endDate 读取复权因子的结束日期 YYYYMMDD\n */\nasync function adjustFactor(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"读取复权因子需要设置股票代码\");\n    }\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.adjustFactor,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.adjustFactor,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期的所有停复盘股票信息\n * @param {string} tradeDate 交易日期 YYYYMMDD\n */\nasync function suspendList(tradeDate) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.suspendInfo,\n        {\n            trade_date: tradeDate,\n        },\n        apiFields.suspendInfo\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期的全部股票的基本面指标，如果日期未设置，则取今日指标\n * @param {string} tradeDate 数据日期\n */\nasync function dailyBasicList(tradeDate = null) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.dailyBasic,\n        {\n            trade_date: tradeDate,\n        },\n        apiFields.dailyBasic\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期范围股票的全部基本面列表\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期 YYYYMMDD\n * @param {string} endDate 结束日期 YYYYMMDD\n */\nasync function dailyBasic(tsCode, startDate = null, endDate = null) {\n    if (_.isEmpty(tsCode)) {\n        return new Error(apiNames.dailyBasic + \"需要设置查询的股票代码\");\n    }\n    let data = await queryData(\n        apiNames.dailyBasic,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.dailyBasic,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return data && data.data;\n}\n\n/**\n * 根据提供的市场/发布商获取指数基础信息列表\n * @param {string} market 市场/发布商\n */\nasync function indexBasic(market) {\n    if (_.isEmpty(market)) {\n        return new Error(\"获取指数信息列表需要设置市场或服务商\");\n    }\n\n    let data = await queryData(\n        apiNames.indexBasic,\n        {\n            market,\n        },\n        apiFields.indexBasic\n    );\n\n    return data && data.data;\n}\n\nfunction showInfo() {\n    return `共发送请求${requestCount}个，收到${responseCount}个返回，其中${errorCount}个错误`;\n}\n\n// export default\nmodule.exports = {\n    stockBasic,\n    stockCompany,\n    stockManagers,\n    stockDaily,\n    adjustFactor,\n    suspendList,\n    dailyBasicList,\n    dailyBasic,\n    indexBasic,\n    indexDaily,\n    globalIndexList,\n    indexMarketList,\n    fieldNames,\n    showInfo,\n};\n"],"names":["axios","require","_","moment","FlowControl","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","apiNames","apiFields","FLOW_CONFIG","maxFlow","flowControls","tmp","api","Object","prototype","hasOwnProperty","call","debug","initFlowControl","requestCount","responseCount","errorCount","async","queryData","params","fields","hasMoreParams","moreDatas","Error","format","fc","response","post","api_name","token","TUSHARE_TOKEN","data","code","items","hasMore","has_more","length","itemIndex","tmpItem","fieldIndex","push","constructData","isFunction","nextParams","moreRetData","moreData","error","msg","module","exports","stockBasic","exchange","listStatus","list_status","stockCompany","tsCode","isEmpty","ts_code","stockManagers","annDate","startDate","endDate","ann_date","start_date","end_date","stockDaily","retData","lastDate","trade_date","subtract","adjustFactor","suspendList","tradeDate","dailyBasicList","dailyBasic","indexBasic","market","indexDaily","globalIndexList","name","indexMarketList","fieldNames","is_hs","symbol","area","industry","fullname","enname","curr_type","list_date","delist_date","is_open","change_reason","chairman","manager","secretary","reg_capital","setup_date","province","city","introduction","website","email","office","employees","main_business","business_scope","gender","lev","title","edu","national","birthday","begin_date","resume","open","high","low","close","pre_close","change","pct_chg","vol","amount","adj_factor","suspend_type","suspend_timing","turnover_rate","turnover_rate_f","volume_ratio","pe","pe_ttm","pb","ps","ps_ttm","dv_ratio","dv_ttm","total_share","float_share","free_share","total_mv","circ_mv","showInfo"],"mappings":"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"}