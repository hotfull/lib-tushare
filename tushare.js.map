{"version":3,"file":"tushare.js","sources":["src/tushare.js"],"sourcesContent":["/* eslint-disable camelcase */\nconst axios = require(\"axios\");\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst FlowControl = require(\"@wt/lib-flowcontrol\");\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\n// const token = \"\"\nconst tushareUrl = \"http://api.tushare.pro\";\n// 增加一个 fieldNames用来给出每个字段（包括输入/输出的说明）\nconst fieldNames = {\n    is_hs: \"是否沪深港通标的，N否 H沪股通 S深股通\",\n    list_status: \"上市状态： L上市 D退市 P暂停上市\",\n    exchange: \"交易所代码 SSE上交所 SZSE深交所 HKEX港交所(未上线)\",\n    ts_code: \"TS代码\",\n    symbol: \"股票代码\",\n    name: \"股票名称\",\n    area: \"所在地域\",\n    industry: \"所属行业\",\n    fullname: \"股票全称\",\n    enname: \"英文全称\",\n    market: \"市场类型 （主板/中小板/创业板/科创板）\",\n    curr_type: \"交易货币\",\n    list_date: \"上市日期\",\n    delist_date: \"退市日期\",\n    start_date: \"开始日期\",\n    end_date: \"结束日期\",\n    is_open: \"是否交易 0 休市 1交易\",\n    cal_date: \"日历日期\",\n    pretrade_date: \"上一个交易日\",\n    ann_date: \"公告日期（YYYYMMDD格式）\",\n    change_reason: \"变更原因\",\n\n    chairman: \"法人代表\",\n    manager: \"总经理\",\n    secretary: \"董秘\",\n    reg_capital: \"注册资本\",\n    setup_date: \"注册日期\",\n    province: \"所在省份\",\n    city: \"所在城市\",\n    introduction: \"公司介绍\",\n    website: \"公司主页\",\n    email: \"电子邮件\",\n    office: \"办公室\",\n    employees: \"员工人数\",\n    main_business: \"主要业务及产品\",\n    business_scope: \"经营范围\",\n    gender: \"性别\",\n    lev: \"岗位类别\",\n    title: \"岗位\",\n    edu: \"学历\",\n    national: \"国籍\",\n    birthday: \"出生年月\",\n    begin_date: \"上任日期\",\n    // end_date: '离任日期',\n    resume: \"个人简历\",\n    trade_date: \"交易日期\",\n    open: \"开盘价\",\n    high: \"最高价\",\n    low: \"最低价\",\n    close: \"收盘价\",\n    pre_close: \"昨收价\",\n    change: \"涨跌额\",\n    pct_chg: \"涨跌幅 （未复权）\",\n    vol: \"成交量 （手）\",\n    amount: \"成交额 （千元）\",\n    adj_factor: \"复权因子\",\n    suspend_type: \"停复牌类型：S-停牌,R-复牌\",\n    suspend_timing: \"日内停牌时间段\",\n    turnover_rate: \"换手率（%）\",\n    turnover_rate_f: \"换手率（自由流通股）\",\n    volume_ratio: \"量比\",\n    pe: \"市盈率（总市值/净利润， 亏损的PE为空）\",\n    pe_ttm: \"市盈率（TTM，亏损的PE为空）\",\n    pb: \"市净率（总市值/净资产）\",\n    ps: \"市销率\",\n    ps_ttm: \"市销率（TTM）\",\n    dv_ratio: \"股息率 （%）\",\n    dv_ttm: \"股息率（TTM）（%）\",\n    total_share: \"总股本 （万股）\",\n    float_share: \"流通股本 （万股）\",\n    free_share: \"自由流通股本 （万）\",\n    total_mv: \"总市值 （万元）\",\n    circ_mv: \"流通市值（万元）\",\n};\nconst globalIndexList = [\n    { code: \"XIN9\", name: \"富时中国A50指数 (富时A50)\" },\n    { code: \"HSI\", name: \"恒生指数\" },\n    { code: \"DJI\", name: \"道琼斯工业指数\" },\n    { code: \"SPX\", name: \"标普500指数\" },\n    { code: \"IXIC\", name: \"纳斯达克指数\" },\n    { code: \"FTSE\", name: \"富时100指数\" },\n    { code: \"FCHI\", name: \"法国CAC40指数\" },\n    { code: \"GDAXI\", name: \"德国DAX指数\" },\n    { code: \"N225\", name: \"日经225指数\" },\n    { code: \"KS11\", name: \"韩国综合指数\" },\n    { code: \"AS51\", name: \"澳大利亚标普200指数\" },\n    { code: \"SENSEX\", name: \"印度孟买SENSEX指数\" },\n    { code: \"IBOVESPA\", name: \"巴西IBOVESPA指数\" },\n    { code: \"RTS\", name: \"俄罗斯RTS指数\" },\n    { code: \"TWII\", name: \"台湾加权指数\" },\n    { code: \"SPTSX\", name: \"加拿大S&P/TSX指数\" },\n];\nconst indexMarketList = [\n    // {code: \"MSCI\", name: \"MSCI指数\"},\n    { code: \"CSI\", name: \"中证指数\" },\n    { code: \"SSE\", name: \"上交所指数\" },\n    { code: \"SZSE\", name: \"深交所指数\" },\n    // {code: \"CICC\", name: \"中金指数\"},\n    // {code: \"SW\", name: \"申万指数\"},\n    // {code: \"OTH\", name: \"其他指数\"},\n];\nconst exchangeList = [\n    { code: \"SSE\", name: \"上交所\" },\n    { code: \"SZSE\", name: \"深交所\" },\n\n    // { code: \"CFFEX\", name: \"中金所\" },\n    // { code: \"SHFE\", name: \"上期所\" },\n    // { code: \"CZCE\", name: \"郑商所\" },\n    // { code: \"DCE\", name: \"大商所\" },\n    // { code: \"INE\", name: \"上能源\" },\n    // { code: \"IB\", name: \"银行间\" },\n    // { code: \"XHKG\", name: \"港交所\" },\n];\nconst apiNames = {\n    stockBasic: \"stock_basic\",\n    stockCompany: \"stock_company\",\n    stockManagers: \"stk_managers\",\n    stockRewards: \"stk_rewards\",\n    // 接口：trade_cal\n    // 描述：获取各大交易所交易日历数据,默认提取的是上交所\n    tradeCalendar: \"trade_cal\",\n    newShare: \"new_share\",\n    // 接口：daily，日线行情\n    // 数据说明：交易日每天15点～16点之间。本接口是未复权行情，停牌期间不提供数据。\n    // 描述：获取股票行情数据，或通过通用行情接口获取数据，包含了前后复权数据。\n    daily: \"daily\",\n    // 接口：adj_factor\n    // 更新时间：早上9点30分\n    // 描述：获取股票复权因子，可提取单只股票全部历史复权因子，也可以提取单日全部股票的复权因子。\n    adjustFactor: \"adj_factor\",\n    // 接口：suspend_d\n    // 更新时间：不定期\n    // 描述：按日期方式获取股票每日停复牌信息\n    suspendInfo: \"suspend_d\",\n    // 接口：daily_basic\n    // 更新时间：交易日每日15点～17点之间\n    // 描述：获取全部股票每日重要的基本面指标，可用于选股分析、报表展示等。\n    dailyBasic: \"daily_basic\",\n    // 接口：moneyflow\n    // 描述：获取沪深A股票资金流向数据，分析大单小单成交情况，用于判别资金动向\n    moneyFlow: \"moneyflow\",\n    // 接口：limit_list\n    // 描述：获取每日涨跌停股票统计，包括封闭时间和打开次数等数据，帮助用户快速定位近期强（弱）势股，以及研究超短线策略。\n    limitList: \"limit_list\",\n    // 接口：moneyflow_hsgt\n    // 描述：获取沪股通、深股通、港股通每日资金流向数据，每次最多返回300条记录，总量不限制。\n    moneyFlowHSGT: \"moneyflow_hsgt\",\n    // 接口：hsgt_top10\n    // 描述：获取沪股通、深股通每日前十大成交详细数据\n    hsgtTop10: \"hsgt_top10\",\n    // 接口：hk_hold\n    // 描述：获取沪深港股通持股明细，数据来源港交所。\n    hkHold: \"hk_hold\",\n    // 接口：ggt_daily\n    // 描述：获取港股通每日成交信息，数据从2014年开始\n    ggtDaily: \"ggt_daily\",\n    // 接口：ggt_monthly\n    // 描述：港股通每月成交信息，数据从2014年开始\n    ggtMonthly: \"ggt_monthly\",\n    // 接口：index_global\n    // 描述：获取国际主要指数日线行情\n    indexGlobal: \"index_global\",\n    // 接口：income\n    // 描述：获取上市公司财务利润表数据\n    income: \"income\",\n    //接口：balancesheet\n    //描述：获取上市公司资产负债表\n    balanceSheet: \"balancesheet\",\n    // 接口：cashflow\n    // 描述：获取上市公司现金流量表\n    cashFlow: \"cashflow\",\n    // 接口：forecast\n    // 描述：获取业绩预告数据\n    forecast: \"forecast\",\n    // 接口：express\n    // 描述：获取上市公司业绩快报\n    express: \"express\",\n    // 接口：dividend\n    // 描述：分红送股数据\n    dividend: \"dividend\",\n    // 接口：fina_indicator\n    // 描述：获取上市公司财务指标数据\n    financialIndicator: \"fina_indicator\",\n    // 接口：fina_mainbz\n    // 描述：获得上市公司主营业务构成，分地区和产品两种方式\n    financialMainbiz: \"fina_mainbz\",\n    // 接口：disclosure_date\n    // 描述：获取财报披露计划日期\n    disclosureDate: \"disclosure_date\",\n    // 接口：pledge_stat\n    // 描述：获取股票质押统计数据\n    pledgeState: \"pledge_stat\",\n    // 接口：pledge_detail\n    // 描述：获取股票质押明细数据\n    pledgeDetail: \"pledge_detail\",\n    // 接口：index_basic\n    // 描述：获取指数基础信息。\n    indexBasic: \"index_basic\",\n    // 接口：index_daily\n    // 描述：获取指数每日行情\n    indexDaily: \"index_daily\",\n    // 接口：index_weight\n    // 描述：获取各类指数成分和权重，月度数据\n    indexWeight: \"index_weight\",\n    // 接口：index_dailybasic\n    // 描述：目前只提供上证综指，深证成指，上证50，中证500，中小板指，创业板指的每日指标数据\n    indexDailyBasic: \"index_dailybasic\",\n    // 接口：index_classify\n    // 描述：获取申万行业分类，包括申万28个一级分类，104个二级分类，227个三级分类的列表信息\n    indexClassify: \"index_classify\",\n    // 接口：index_member\n    // 描述：申万行业成分\n    indexMember: \"index_member\",\n    // 接口：daily_info\n    // 描述：获取交易所股票交易统计，包括各板块明细\n    dailyInfo: \"daily_info\",\n};\n\nconst apiFields = {\n    stockBasic:\n        \"ts_code,symbol,name,area,industry,fullname,enname,market,exchange,curr_type,list_status,list_date,delist_date,is_hs\",\n    stockCompany:\n        \"ts_code,exchange,chairman,manager,secretary,reg_capital,setup_date,province,city,introduction,website,email,office,employees,main_business,business_scope\",\n    stockManagers:\n        \"ts_code,ann_date,name,gender,lev,title,edu,national,birthday,begin_date,end_date,resume\",\n    stockRewards: \"ts_code,ann_date,end_date,name,title,reward,hold_vol\",\n    tradeCalendar: \"exchange,cal_date,is_open,pretrade_date\",\n    newShare:\n        \"ts_code,sub_code,name,ipo_date,issue_date,amount,market_amount,price,pe,limit_amount,funds,ballot\",\n    daily:\n        \"ts_code,trade_date,open,high,low,close,pre_close,change,pct_chg,vol,amount\",\n    adjustFactor: \"ts_code,trade_date,adj_factor\",\n    suspendInfo: \"ts_code,trade_date,suspend_timing,suspend_type\",\n    dailyBasic:\n        \"ts_code,trade_date,close,turnover_rate,turnover_rate_f,volume_ratio,pe,pe_ttm,pb,ps,ps_ttm,dv_ratio,dv_ttm,total_share,float_share,free_share,total_mv,circ_mv\",\n    moneyFlow:\n        \"ts_code,trade_date,buy_sm_vol,buy_sm_amount,sell_sm_vol,sell_sm_amount,buy_md_vol,buy_md_amount,sell_md_vol,sell_md_amount,buy_lg_vol,buy_lg_amount,sell_lg_vol,sell_lg_amount,buy_elg_vol,buy_elg_amount,sell_elg_vol,sell_elg_amount,net_mf_vol,net_mf_amount\",\n    limitList:\n        \"ts_code,trade_date,name,close,pct_chg,amp,fc_ratio,fl_ratio,fd_amount,first_time,last_time,open_times,strth,limit\",\n    moneyFlowHSGT: \"trade_date,ggt_ss,ggt_sz,hgt,sgt,north_money,south_money\",\n    hsgtTop10:\n        \"ts_code,trade_date,name,close,change,rank,market_type,amount,net_amount,buy,sell\",\n    hkHold: \"code,trade_date,ts_code,name,vol,ratio,exchange\",\n    ggtDaily: \"trade_date,buy_amount,buy_volume,sell_amount,sell_volume\",\n    ggtMonthly:\n        \"month,day_buy_amt,day_buy_vol,day_sell_amt,day_sell_vol,total_buy_amt,total_buy_vol,total_sell_amt,total_sell_vol\",\n    indexGlobal:\n        \"ts_code,trade_date,open,close,high,low,pre_close,change,pct_chg,vol,amount\",\n\n    income:\n        \"ts_code,ann_date,f_ann_date,end_date,report_type,comp_type,basic_eps,total_revenue,revenue,int_income,prem_earned,comm_income,n_commis_income,n_oth_income,n_oth_b_income,out_prem,une_prem_reser,reins_income,n_sec_tb_income,n_sec_uw_income,n_asset_mg_income,oth_b_income,fv_value_chg_gain,invest_income,ass_invest_income,forex_gain,total_cogs,oper_cost,int_exp,comm_exp,biz_tax_surchg,sell_exp,admin_exp,fin_exp,assets_impair_loss,prem_refund,compens_payout,reser_insur_liab,div_payt,reins_exp,oper_exp,compens_payout_refu,insur_reser_refu,reins_cost_refund,other_bus_cost,operate_profit,non_oper_income,non_oper_exp,nca_disploss,total_profit,income_tax,n_income,n_income_attr_p,minority_gain,oth_compr_income,t_compr_income,compr_inc_attr_p,compr_inc_attr_m_s,ebit,ebitda,insurance_exp,undist_profit,distable_profit,update_flag\",\n    balanceShet:\n        \"ts_code,ann_date,f_ann_date,end_date,report_type,comp_type,total_share,cap_rese,undistr_porfit,surplus_rese,special_rese,money_cap,trad_asset,notes_receiv,accounts_receiv,oth_receiv,int_receiv,inventories,amor_exp,nca_within_1y,sett_rsrv,loanto_oth_bank_fi,premium_receiv,reinsur_receiv,reinsur_res_receiv,pur_resale_fa,oth_cur_assets,total_cur_assets,fa_avail_for_sale,htm_invest,lt_eqt_invest,invest_real_estate,time_deposits,oth_assets,lt_rec,fix_assets,cip,const_materials,fixed_assets_disp,produc_bio_assets,oil_and_gas_assets,intain_assets,r_and_d,goodwill,lt_amor_exp,defer_tax_assets,decr_in_disbur,oth_nca,total_nca,cash_reser_cb,depos_in_oth_bfi,prec_metals,deriv_assets,rr_reins_une_prem,rr_reins_outstd_cla,rr_reins_lins_liab,rr_reins_lthins_liab,refund_depos,ph_pledge_loans,refund_cap_depos,indep_acct_assets,client_depos,client_prov,transac_seat_fee,invest_as_receiv,total_assets,lt_borr,st_borr,cb_borr,depos_ib_deposits,loan_oth_bank,trading_fl,notes_payable,acct_payable,adv_receipts,sold_for_repur_fa,comm_payable,payroll_payable,taxes_payable,int_payable,div_payable,oth_payable,acc_exp,deferred_inc,st_bonds_payable,payable_to_reinsurer,rsrv_insur_cont,acting_trading_sec,acting_uw_sec,non_cur_liab_due_1y,oth_cur_liab,total_cur_liab,bond_payable,lt_payable,specific_payables,estimated_liab,defer_tax_liab,defer_inc_non_cur_liab,oth_ncl,total_ncl,depos_oth_bfi,deriv_liab,depos,agency_bus_liab,oth_liab,prem_receiv_adva,depos_received,ph_invest,reser_une_prem,reser_outstd_claims,reser_lins_liab,reser_lthins_liab,indept_acc_liab,pledge_borr,indem_payable,policy_div_payable,total_liab,treasury_share,ordin_risk_reser,forex_differ,invest_loss_unconf,minority_int,total_hldr_eqy_exc_min_int,total_hldr_eqy_inc_min_int,total_liab_hldr_eqy,lt_payroll_payable,oth_comp_income,oth_eqt_tools,oth_eqt_tools_p_shr,lending_funds,acc_receivable,st_fin_payable,payables,hfs_assets,hfs_sales,update_flag\",\n    cashflow:\n        \"ts_code,ann_date,f_ann_date,end_date,comp_type,report_type,net_profit,finan_exp,c_fr_sale_sg,recp_tax_rends,n_depos_incr_fi,n_incr_loans_cb,n_inc_borr_oth_fi,prem_fr_orig_contr,n_incr_insured_dep,n_reinsur_prem,n_incr_disp_tfa,ifc_cash_incr,n_incr_disp_faas,n_incr_loans_oth_bank,n_cap_incr_repur,c_fr_oth_operate_a,c_inf_fr_operate_a,c_paid_goods_s,c_paid_to_for_empl,c_paid_for_taxes,n_incr_clt_loan_adv,n_incr_dep_cbob,c_pay_claims_orig_inco,pay_handling_chrg,pay_comm_insur_plcy,oth_cash_pay_oper_act,st_cash_out_act,n_cashflow_act,oth_recp_ral_inv_act,c_disp_withdrwl_invest,c_recp_return_invest,n_recp_disp_fiolta,n_recp_disp_sobu,stot_inflows_inv_act,c_pay_acq_const_fiolta,c_paid_invest,n_disp_subs_oth_biz,oth_pay_ral_inv_act,n_incr_pledge_loan,stot_out_inv_act,n_cashflow_inv_act,c_recp_borrow,proc_issue_bonds,oth_cash_recp_ral_fnc_act,stot_cash_in_fnc_act,free_cashflow,c_prepay_amt_borr,c_pay_dist_dpcp_int_exp,incl_dvd_profit_paid_sc_ms,oth_cashpay_ral_fnc_act,stot_cashout_fnc_act,n_cash_flows_fnc_act,eff_fx_flu_cash,n_incr_cash_cash_equ,c_cash_equ_beg_period,c_cash_equ_end_period,c_recp_cap_contrib,incl_cash_rec_saims,uncon_invest_loss,prov_depr_assets,depr_fa_coga_dpba,amort_intang_assets,lt_amort_deferred_exp,decr_deferred_exp,incr_acc_exp,loss_disp_fiolta,loss_scr_fa,loss_fv_chg,invest_loss,decr_def_inc_tax_assets,incr_def_inc_tax_liab,decr_inventories,decr_oper_payable,incr_oper_payable,others,im_net_cashflow_oper_act,conv_debt_into_cap,conv_copbonds_due_within_1y,fa_fnc_leases,end_bal_cash,beg_bal_cash,end_bal_cash_equ,beg_bal_cash_equ,im_n_incr_cash_equ,update_flag\",\n    forecast:\n        \"ts_code,ann_date,end_date,type,p_change_min,p_change_max,net_profit_min,net_profit_max,last_parent_net,first_ann_date,summary,change_reason\",\n    express:\n        \"ts_code,ann_date,end_date,revenue,operate_profit,total_profit,n_income,total_assets,total_hldr_eqy_exc_min_int,diluted_eps,diluted_roe,yoy_net_profit,bps,yoy_sales,yoy_op,yoy_tp,yoy_dedu_np,yoy_eps,yoy_roe,growth_assets,yoy_equity,growth_bps,or_last_year,op_last_year,tp_last_year,np_last_year,eps_last_year,open_net_assets,open_bps,perf_summary,is_audit,remark\",\n    dividend:\n        \"ts_code,end_date,ann_date,div_proc,stk_div,stk_bo_rate,stk_co_rate,cash_div,cash_div_tax,record_date,ex_date,pay_date,div_listdate,imp_ann_date,base_date,base_share\",\n    financialIndicator:\n        \"ts_code,ann_date,end_date,eps,dt_eps,total_revenue_ps,revenue_ps,capital_rese_ps,surplus_rese_ps,undist_profit_ps,extra_item,profit_dedt,gross_margin,current_ratio,quick_ratio,cash_ratio,invturn_days,arturn_days,inv_turn,ar_turn,ca_turn,fa_turn,assets_turn,op_income,valuechange_income,interst_income,daa,ebit,ebitda,fcff,fcfe,current_exint,noncurrent_exint,interestdebt,netdebt,tangible_asset,working_capital,networking_capital,invest_capital,retained_earnings,diluted2_eps,bps,ocfps,retainedps,cfps,ebit_ps,fcff_ps,fcfe_ps,netprofit_margin,grossprofit_margin,cogs_of_sales,expense_of_sales,profit_to_gr,saleexp_to_gr,adminexp_of_gr,finaexp_of_gr,impai_ttm,gc_of_gr,op_of_gr,ebit_of_gr,roe,roe_waa,roe_dt,roa,npta,roic,roe_yearly,roa2_yearly,roe_avg,opincome_of_ebt,investincome_of_ebt,n_op_profit_of_ebt,tax_to_ebt,dtprofit_to_profit,salescash_to_or,ocf_to_or,ocf_to_opincome,capitalized_to_da,debt_to_assets,assets_to_eqt,dp_assets_to_eqt,ca_to_assets,nca_to_assets,tbassets_to_totalassets,int_to_talcap,eqt_to_talcapital,currentdebt_to_debt,longdeb_to_debt,ocf_to_shortdebt,debt_to_eqt,eqt_to_debt,eqt_to_interestdebt,tangibleasset_to_debt,tangasset_to_intdebt,tangibleasset_to_netdebt,ocf_to_debt,ocf_to_interestdebt,ocf_to_netdebt,ebit_to_interest,longdebt_to_workingcapital,ebitda_to_debt,turn_days,roa_yearly,roa_dp,fixed_assets,profit_prefin_exp,non_op_profit,op_to_ebt,nop_to_ebt,ocf_to_profit,cash_to_liqdebt,cash_to_liqdebt_withinterest,op_to_liqdebt,op_to_debt,roic_yearly,total_fa_trun,profit_to_op,q_opincome,q_investincome,q_dtprofit,q_eps,q_netprofit_margin,q_gsprofit_margin,q_exp_to_sales,q_profit_to_gr,q_saleexp_to_gr,q_adminexp_to_gr,q_finaexp_to_gr,q_impair_to_gr_ttm,q_gc_to_gr,q_op_to_gr,q_roe,q_dt_roe,q_npta,q_opincome_to_ebt,q_investincome_to_ebt,q_dtprofit_to_profit,q_salescash_to_or,q_ocf_to_sales,q_ocf_to_or,basic_eps_yoy,dt_eps_yoy,cfps_yoy,op_yoy,ebt_yoy,netprofit_yoy,dt_netprofit_yoy,ocf_yoy,roe_yoy,bps_yoy,assets_yoy,eqt_yoy,tr_yoy,or_yoy,q_gr_yoy,q_gr_qoq,q_sales_yoy,q_sales_qoq,q_op_yoy,q_op_qoq,q_profit_yoy,q_profit_qoq,q_netprofit_yoy,q_netprofit_qoq,equity_yoy,rd_exp,update_flag\",\n    financialMainbiz:\n        \"ts_code,end_date,bz_item,bz_sales,bz_profit,bz_cost,curr_type,update_flag\",\n    disclosureDate:\n        \"ts_code,ann_date,end_date,pre_date,actual_date,modify_date\",\n    pledgeState:\n        \"ts_code,end_date,pledge_count,unrest_pledge,rest_pledge,total_share,pledge_ratio\",\n    pledgeDetail:\n        \"ts_code,ann_date,holder_name,pledge_amount,start_date,end_date,is_release,release_date,pledgor,holding_amount,pledged_amount,p_total_ratio,h_total_ratio,is_buyback\",\n\n    indexBasic:\n        \"ts_code,name,fullname,market,publisher,index_type,category,base_date,base_point,list_date,weight_rule,desc,exp_date\",\n    indexDaily:\n        \"ts_code,trade_date,close,open,high,low,pre_close,change,pct_chg,vol,amount\",\n    indexWeight: \"index_code,con_code,trade_date,weight\",\n    indexDailyBasic:\n        \"ts_code,trade_date,total_mv,float_mv,total_share,float_share,free_share,turnover_rate,turnover_rate_f,pe,pe_ttm,pb\",\n    indexClassify: \"index_code,industry_name,level,industry_code\",\n    indexMember:\n        \"index_code,index_name,con_code,con_name,in_date,out_date,is_new\",\n    dailyInfo:\n        \"trade_date,ts_code,ts_name,com_count,total_share,float_share,total_mv,float_mv,amount,vol,trans_count,pe,tr,exchange\",\n};\n\n// 每个api_name对应一组流控参数，如果没有配置，则认为不需要流控，\n// 或者统一放在一个默认流控池中控制\nconst DEFAULT_FLOWCONTROL_NAME = \"默认\";\nconst FLOW_CONFIG = {\n    [apiNames.daily]: { maxFlow: 800 },\n    [apiNames.indexDaily]: { maxFlow: 300 },\n    [apiNames.adjustFactor]: { maxFlow: 800 },\n    [apiNames.dailyBasic]: { maxFlow: 400 },\n    [apiNames.financialMainbiz]: { maxFlow: 60 },\n    [DEFAULT_FLOWCONTROL_NAME]: { maxFlow: 800 },\n};\n\n// const MAX_WORKER = 20\n// const MAX_FLOW = 300\n// 流控池，每个协议定义自己的流控\n// const flowControl = {\n//     daily: new FlowControl(MAX_WORKER, MAX_FLOW, \"tushare流控\"),\n// }\n\nfunction initFlowControl() {\n    let tmp = {};\n    for (let api in FLOW_CONFIG) {\n        if (Object.prototype.hasOwnProperty.call(FLOW_CONFIG, api)) {\n            tmp[api] = new FlowControl(\n                FLOW_CONFIG[api].maxFlow,\n                `接口${api}流控`\n            );\n            logger.debug(`创建流控 接口${api}, %o`, tmp[api]);\n        }\n    }\n    return tmp;\n}\nconst flowControls = initFlowControl();\n\n// 请求计数\nlet requestCount = 0;\nlet responseCount = 0;\nlet errorCount = 0;\n\n/**\n *\n * @param {string} api 发起请求的接口名称\n * @param {object} params 接口参数\n * @param {string} fields 返回字段列表，逗号分割字符串\n * @param {Function} hasMoreParams 如果接口返回hasMore，使用该方法计算获取下一次数据的参数，方法传入上一次参数和本次返回数据，不设置则不支持hasMore\n * @param {Function} moreDatas 在支持hasMore后，返回数据和之前数据的合并处理方法，传入之前的数据和这一次返回数据，返回合并结果，不设置则按照数组自动添加在后面\n */\n// eslint-disable-next-line max-params\nasync function queryData(\n    api = \"\",\n    params = {},\n    fields = \"\",\n    hasMoreParams = null,\n    moreDatas = null\n) {\n    if (!api && api === \"\") {\n        throw new Error(\"未指定接口api名称！\");\n    }\n    // logger.log(\"tushare query data:\", api, params)\n    // logger.log(\"env: \", process.env)\n\n    // await sleep(1000 / 800)\n    // console.count(\"queryData\");\n    logger.debug(\n        \"%s 发送请求，%s, %o\",\n        moment().format(\"h:mm:ss\"),\n        api,\n        params\n    );\n    requestCount++;\n\n    // 流控添加到axios发起时触发，流控池由api_name进行分组\n    let fc = flowControls[api];\n    if (!fc) {\n        fc = flowControls[DEFAULT_FLOWCONTROL_NAME];\n    }\n    // logger.debug(\"use flow control: \", api, fc, typeof fc)\n    const response = await fc.call(axios.post, tushareUrl, {\n        api_name: api,\n        token: process.env.TUSHARE_TOKEN,\n        params,\n        fields: fields,\n    });\n\n    // const response = await axios.post(tushareUrl, {\n    //     api_name: api,\n    //     token: process.env.TUSHARE_TOKEN,\n    //     params,\n    //     fields: fields,\n    // })\n\n    // .then(function (response) {\n    // logger.log(response)\n    responseCount++;\n    if (response && response.data && response.data.code === 0) {\n        let fields = response.data.data.fields;\n        let items = response.data.data.items;\n        let hasMore = response.data.data.has_more;\n\n        logger.debug(\n            \"收到服务器响应：字段数量=%d, 数据长度=%d，是否还有更多数据：%s；请求信息 %s，%o\",\n            fields.length,\n            items.length,\n            hasMore,\n            api,\n            params\n        );\n        let data = await constructData({ fields, items });\n        // logger.log(\"constructed data:\", data.length)\n\n        // 这里考虑在hasMore为true，并且传入了hasMoreParams方法的情况下执行更多数据获取的逻辑\n        if (hasMore && hasMoreParams && _.isFunction(hasMoreParams)) {\n            let nextParams = await hasMoreParams(params, data);\n            logger.debug(\n                \"有更多数据需要获取：%o, %o, %d\",\n                params,\n                nextParams,\n                data && data.length\n            );\n            // 如果无法设置参数，会返回空，这里就不再继续获取\n            if (nextParams) {\n                let moreRetData = await queryData(\n                    api,\n                    nextParams,\n                    fields,\n                    hasMoreParams,\n                    moreDatas\n                );\n                hasMore = moreRetData && moreRetData.hasMore;\n                let moreData = moreRetData && moreRetData.data;\n\n                if (moreDatas && _.isFunction(moreDatas)) {\n                    logger.debug(\n                        \"更多数据调用合并: %d && %d\",\n                        data.length,\n                        moreData.length\n                    );\n                    data = await moreDatas(data, moreData && moreData.data);\n                } else {\n                    logger.debug(\n                        \"更多数据自动合并: %d && %d\",\n                        data.length,\n                        moreData.length\n                    );\n                    data.push(...moreData);\n                }\n            } else {\n                hasMore = false;\n            }\n        }\n\n        return {\n            data,\n            hasMore,\n        };\n    }\n    errorCount++;\n    logger.error(\n        \"发现错误(请求信息 %s, %o)：%s, %s\",\n        api,\n        params,\n        response.data.code,\n        response.data.msg\n    );\n    throw new Error(\n        \"接口返回错误[\" + response.data.code + \"]:\" + response.data.msg\n    );\n}\n\n// async function queryDataLimit(api, params, fields) {\n//     return flowControl.call(queryData, api, params, fields)\n// }\n\n/**\n * 重构接口返回数据\n * @param {Array} data http接口返回数据\n */\nasync function constructData(data) {\n    if (!data || data.length <= 0) return data;\n    let fields = data.fields;\n    let items = data.items;\n    let tmp = [];\n    if (!fields || fields.length === 0 || !items || items.length === 0) {\n        return tmp;\n    }\n\n    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n        let tmpItem = {};\n        for (let fieldIndex = 0; fieldIndex < fields.length; fieldIndex++) {\n            tmpItem[fields[fieldIndex]] = items[itemIndex][fieldIndex];\n        }\n        tmp.push(tmpItem);\n    }\n    return tmp;\n}\n\nasync function stockBasic(exchange = \"\", listStatus = \"L\") {\n    let data = await queryData(\n        apiNames.stockBasic,\n        {\n            exchange,\n            list_status: listStatus,\n        },\n        apiFields.stockBasic\n    );\n    return data && data.data;\n}\n\nasync function stockCompany(tsCode, exchange) {\n    if (_.isEmpty(tsCode)) return new Error(\"公司基本信息未指定代码\");\n    if (_.isEmpty(exchange)) return new Error(\"公司基本信息未指定交易所\");\n\n    let data = await queryData(\n        apiNames.stockCompany,\n        {\n            ts_code: tsCode,\n            exchange,\n        },\n        apiFields.stockCompany\n    );\n    return data && data.data;\n}\n\nasync function stockManagers(tsCode = \"\", annDate = \"\", startDate, endDate) {\n    if (\n        _.isEmpty(tsCode) &&\n        _.isEmpty(annDate) &&\n        _.isEmpty(startDate) &&\n        _.isEmpty(endDate)\n    ) {\n        return new Error(\"上市公司管理层参数设置错误！\");\n    }\n\n    let data = await queryData(\n        apiNames.stockManagers,\n        {\n            ts_code: tsCode,\n            ann_date: annDate,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.stockManagers\n    );\n    return data && data.data;\n}\n\n/**\n * 这个方法用来读取指定股票代码的历史数据，如果startDate未设置，则需要获取全部\n * 如果startDate未设置，需要读取最新\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期\n * @param {string} endDate 结束日期\n */\nasync function stockDaily(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"日线行情数据代码设置错误！\");\n    }\n\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.daily,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.daily,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    logger.debug(\n        `获得日线数据 ${tsCode}, 条数=${data && data.data && data.data.length}`\n    );\n    return data && data.data;\n    // let hasMore = true\n    // let retData = []\n    // while (hasMore) {\n    //     let data = null\n    //     // 计算下一个日期范围\n    //     if (retData.length > 0) {\n    //         let lastDate = moment(retData[retData.length - 1].trade_date, \"YYYYMMDD\")\n    //         endDate = lastDate.subtract(1, \"days\").format(\"YYYYMMDD\")\n    //     }\n\n    //     logger.debug(\"stock daily query: \", tsCode, startDate, endDate)\n\n    //     // eslint-disable-next-line no-await-in-loop\n    //     let tmp = await queryData(\n    //         apiNames.daily,\n    //         {\n    //             ts_code: tsCode,\n    //             start_date: startDate,\n    //             end_date: endDate,\n    //         },\n    //         apiFields.daily\n    //     )\n    //     hasMore = tmp && tmp.hasMore\n    //     data = tmp && tmp.data\n\n    //     if (data && data.length > 0) {\n    //         retData.push(...data)\n    //     }\n    //     logger.debug(\"stock daily read: \", tsCode, data && data.length, hasMore, retData && retData.length)\n    // }\n    // return retData\n}\n\n/**\n * 这个方法用来读取指定指数代码的历史数据，如果startDate未设置，则需要获取全部\n * 如果startDate未设置，需要读取最新\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期\n * @param {string} endDate 结束日期\n */\nasync function indexDaily(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"指数日线数据代码设置错误！\");\n    }\n\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.indexDaily,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.indexDaily,\n        async (params, retData) => {\n            let endDate = \"\";\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                endDate = lastDate.subtract(1, \"days\").format(\"YYYYMMDD\");\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: endDate,\n                };\n            }\n            return null;\n        }\n    );\n    logger.debug(\n        `获得指数日线数据 ${tsCode}, 条数=${\n            data && data.data && data.data.length\n        }`\n    );\n    return data && data.data;\n}\n\n/**\n * 提供一只股票指定时间范围的全部复权因子数据，这个数据可以在日线历史数据中配合使用\n * @param {string} tsCode 股票代码\n * @param {string} startDate 读取复权因子的开始日期 YYYYMMDD\n * @param {string} endDate 读取复权因子的结束日期 YYYYMMDD\n */\nasync function adjustFactor(tsCode, startDate = \"\", endDate = \"\") {\n    if (_.isEmpty(tsCode)) {\n        return new Error(\"读取复权因子需要设置股票代码\");\n    }\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.adjustFactor,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.adjustFactor,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期的所有停复盘股票信息\n * @param {string} tradeDate 交易日期 YYYYMMDD\n */\nasync function suspendList(tradeDate) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.suspendInfo,\n        {\n            trade_date: tradeDate,\n        },\n        apiFields.suspendInfo\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期的全部股票的基本面指标，如果日期未设置，则取今日指标\n * @param {string} tradeDate 数据日期\n */\nasync function dailyBasicList(tradeDate = null) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let data = await queryData(\n        apiNames.dailyBasic,\n        {\n            trade_date: tradeDate,\n        },\n        apiFields.dailyBasic\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期范围股票的全部基本面列表\n * @param {string} tsCode 代码\n * @param {string} startDate 开始日期 YYYYMMDD\n * @param {string} endDate 结束日期 YYYYMMDD\n */\nasync function dailyBasic(tsCode, startDate = null, endDate = null) {\n    if (_.isEmpty(tsCode)) {\n        return new Error(apiNames.dailyBasic + \"需要设置查询的股票代码\");\n    }\n    let data = await queryData(\n        apiNames.dailyBasic,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.dailyBasic,\n        async (params, retData) => {\n            // let endDate = \"\"\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].trade_date,\n                    \"YYYYMMDD\"\n                );\n                // endDate =\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return data && data.data;\n}\n\n/**\n * 根据提供的市场/发布商获取指数基础信息列表\n * @param {string} market 市场/发布商\n */\nasync function indexBasic(market) {\n    if (_.isEmpty(market)) {\n        return new Error(\"获取指数信息列表需要设置市场或服务商\");\n    }\n\n    let data = await queryData(\n        apiNames.indexBasic,\n        {\n            market,\n        },\n        apiFields.indexBasic\n    );\n\n    return data && data.data;\n}\n\n/**\n * 查询指定交易所的交易日历数据\n * @param {string} exchange 交易所代码\n * @param {string} startDate 查询开始日期，YYYYMMDD\n * @param {string} endDate 查询结束日期，YYYYMMDD\n */\nasync function tradeCalendar(exchange, startDate = null, endDate = null) {\n    if (_.isEmpty(exchange)) {\n        return new Error(apiNames.tradeCalendar + \"需要设置查询的交易所代码\");\n    }\n    let data = await queryData(\n        apiNames.tradeCalendar,\n        {\n            exchange,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.tradeCalendar,\n        async (params, retData) => {\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1].cal_date,\n                    \"YYYYMMDD\"\n                );\n                return {\n                    exchange,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return data && data.data;\n}\n\n/**\n * 可以支持queryStockInfo接口的apiNames\n */\nconst queryStockInfoApiNames = {\n    daily: apiNames.daily,\n    adjustFactor: apiNames.adjustFactor,\n    suspendInfo: apiNames.suspendInfo,\n    dailyBasic: apiNames.dailyBasic,\n    moneyFlow: apiNames.moneyFlow,\n    indexDailyBasic: apiNames.indexDailyBasic,\n    indexDaily: apiNames.indexDaily,\n};\n\nconst queryStockFinancialInfoApiNames = {\n    income: apiNames.income,\n    balanceSheet: apiNames.balanceSheet,\n    cashFlow: apiNames.cashFlow,\n    forecast: apiNames.forecast,\n    express: apiNames.express,\n    dividend: apiNames.dividend,\n    financialIndicator: apiNames.financialIndicator,\n    financialMainbiz: apiNames.financialMainbiz,\n    disclosureDate: apiNames.disclosureDate,\n};\n\nconst stockDataNames = {\n    daily: \"daily\",\n    adjustFactor: \"adjustFactor\",\n    suspendInfo: \"suspendInfo\",\n    dailyBasic: \"dailyBasic\",\n    moneyFlow: \"moneyFlow\",\n    indexDailyBasic: \"indexDailyBasic\",\n    indexDaily: \"indexDaily\",\n    income: \"income\",\n    balanceSheet: \"balanceSheet\",\n    cashFlow: \"cashFlow\",\n    forecast: \"forecast\",\n    express: \"express\",\n    dividend: \"dividend\",\n    financialIndicator: \"financialIndicator\",\n    financialMainbiz: \"financialMainbiz\",\n    disclosureDate: \"disclosureDate\",\n};\n\n/**\n * 对应apiNames，返回字段中用来标记日期的字段名称\n */\nconst stockInfoReturnDateField = \"trade_date\";\nconst stockFinancialInfoReturnDateField = \"ann_date\";\n\n/**\n * 符合使用代码，开始日期，结束日期查询接口的通用访问，比较适合于个股数据\n * @param {string} apiName 接口名称，可以用apiNames常量表获取\n * @param {string} tsCode 代码，不一定是股票代码，也可能是市场代码或其它\n * @param {string} startDate 查询开始日期，YYYYMMDD\n * @param {string} endDate 查询结束日期，YYYYMMDD\n * @param {string} returnDateFiled 返回数据中用于确定处理更多数据时候使用的日期字段，默认为trade_date\n * @returns {Array} 返回查询到的全部数据，以及对应的最近和最早的两个日期\n */\nasync function queryStockInfo(\n    dataName,\n    tsCode,\n    startDate = null,\n    endDate = null\n) {\n    let isStockInfo = !!queryStockInfoApiNames[dataName];\n    let isStockFinancialInfo = !!queryStockFinancialInfoApiNames[dataName];\n\n    if (!isStockInfo && !isStockFinancialInfo) {\n        return new Error(\"没有设置要调取的接口名称或者接口不支持！\");\n    }\n\n    let apiName =\n        queryStockInfoApiNames[dataName] ||\n        queryStockFinancialInfoApiNames[dataName];\n    if (_.isEmpty(tsCode)) {\n        return new Error(dataName + \"需要设置查询的代码\");\n    }\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let returnField = isStockInfo\n        ? stockInfoReturnDateField\n        : stockFinancialInfoReturnDateField;\n    logger.debug(\n        `个股数据参数：${dataName}, ${tsCode}, ${isStockInfo}, ${apiName}, ${startDate}, ${endDate}, ${returnField}`\n    );\n\n    let data = await queryData(\n        apiName,\n        {\n            ts_code: tsCode,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields[apiName],\n        async (params, retData) => {\n            if (retData && retData.length > 0) {\n                let lastDate = moment(\n                    retData[retData.length - 1][returnField],\n                    \"YYYYMMDD\"\n                );\n                return {\n                    ts_code: tsCode,\n                    start_date: startDate,\n                    end_date: lastDate.subtract(1, \"days\").format(\"YYYYMMDD\"),\n                };\n            }\n            return null;\n        }\n    );\n    return [\n        data && data.data,\n        // 最新日期, end_date\n        data && (data.data.length > 0 ? data.data[0][returnField] : null),\n        // 最早日期, start_date\n        data &&\n            (data.data.length > 0\n                ? data.data[data.data.length - 1][returnField]\n                : null),\n    ];\n}\n\nfunction showInfo() {\n    return `共发送请求${requestCount}个，收到${responseCount}个返回，其中${errorCount}个错误`;\n}\n\n// export default\nmodule.exports = {\n    stockBasic,\n    stockCompany,\n    stockManagers,\n    stockDaily,\n    adjustFactor,\n    suspendList,\n    dailyBasicList,\n    dailyBasic,\n    indexBasic,\n    indexDaily,\n    tradeCalendar,\n    queryStockInfo,\n    exchangeList,\n    globalIndexList,\n    indexMarketList,\n    fieldNames,\n    stockDataNames,\n    showInfo,\n};\n"],"names":["axios","require","_","moment","FlowControl","pino","logger","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","tushareUrl","fieldNames","is_hs","list_status","exchange","ts_code","symbol","name","area","industry","fullname","enname","market","curr_type","list_date","delist_date","start_date","end_date","is_open","cal_date","pretrade_date","ann_date","change_reason","chairman","manager","secretary","reg_capital","setup_date","province","city","introduction","website","email","office","employees","main_business","business_scope","gender","lev","title","edu","national","birthday","begin_date","resume","trade_date","open","high","low","close","pre_close","change","pct_chg","vol","amount","adj_factor","suspend_type","suspend_timing","turnover_rate","turnover_rate_f","volume_ratio","pe","pe_ttm","pb","ps","ps_ttm","dv_ratio","dv_ttm","total_share","float_share","free_share","total_mv","circ_mv","globalIndexList","code","indexMarketList","exchangeList","apiNames","stockBasic","stockCompany","stockManagers","stockRewards","tradeCalendar","newShare","daily","adjustFactor","suspendInfo","dailyBasic","moneyFlow","limitList","moneyFlowHSGT","hsgtTop10","hkHold","ggtDaily","ggtMonthly","indexGlobal","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","pledgeState","pledgeDetail","indexBasic","indexDaily","indexWeight","indexDailyBasic","indexClassify","indexMember","dailyInfo","apiFields","balanceShet","cashflow","DEFAULT_FLOWCONTROL_NAME","FLOW_CONFIG","maxFlow","initFlowControl","tmp","api","Object","prototype","hasOwnProperty","call","debug","flowControls","requestCount","responseCount","errorCount","queryData","params","fields","hasMoreParams","moreDatas","Error","format","fc","response","post","api_name","token","TUSHARE_TOKEN","data","items","hasMore","has_more","length","constructData","isFunction","nextParams","moreRetData","moreData","push","error","msg","itemIndex","tmpItem","fieldIndex","listStatus","tsCode","isEmpty","annDate","startDate","endDate","stockDaily","retData","lastDate","subtract","suspendList","tradeDate","dailyBasicList","queryStockInfoApiNames","queryStockFinancialInfoApiNames","stockDataNames","stockInfoReturnDateField","stockFinancialInfoReturnDateField","queryStockInfo","dataName","isStockInfo","isStockFinancialInfo","apiName","returnField","showInfo","module","exports"],"mappings":"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"}